{"version":3,"sources":["components/wea.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","icon","temp","min","max","minmax","mint","maxt","desc","Form","err","role","onSubmit","loadweather","type","placeholder","name","autoComplete","App","getweather","e","a","preventDefault","target","elements","value","country","fetch","apicall","json","response","console","log","setState","sys","cal","main","temp_min","temp_max","weather","description","get_WeatherIcon","id","state","weathericon","Thunderstrom","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","Thunderstorm","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.949acc9c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather = (props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"text-center\">\r\n            <div className=\"cards\">\r\n                <h1>{props.city}</h1>\r\n                \r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.icon} display-1`}/>\r\n                </h5>\r\n                \r\n                {props.temp ? ( <h1 className=\"py-2\">{props.temp}&deg;</h1>):null}\r\n\r\n                {minmax(props.mint,props.maxt)}\r\n                <h3>{props.desc}</h3>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nfunction minmax(min,max){\r\n  if(min && max){\r\n        \r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Weather;","import React from 'react'\r\nimport '../components/form.css'\r\nconst Form = props => {\r\n    return (\r\n      \r\n      <div className=\"container h-100\">\r\n        <div> {props.err ? err(): null}</div> \r\n        <form onSubmit={props.loadweather}>\r\n       \r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n          \r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"City\"\r\n                name=\"city\"\r\n                autoComplete=\"off\"\r\n                \r\n              />\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Country\"\r\n                name=\"country\"\r\n                autoComplete=\"off\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\r\n              <button className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n          </div>\r\n          \r\n        </form>\r\n      \r\n      </div>\r\n    );\r\n  };\r\n  \r\n  function err(){\r\n    return (\r\n      <div className=\"alert alert-danger mx-5\" role =\"alert\">\r\n        Please Enter City and Country\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  export default Form;","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Weather from './components/wea';\nimport \"./weather-icons-master/css/weather-icons.min.css\"\nimport Form from './components/form';\nimport '../src/App.css'\n\nconst key = \"3ce91d62d5805c2770ce67d2a49f0817 \"\n\n\nclass App extends React.Component{\n\n  cal(temp){\n    let cell = Math.floor(temp-273.15);\n    return cell;\n  }\n\n  constructor(){\n    super();\n    this.state={\n      city : \"\",\n      country:\"\",\n      mint:\"\",\n      maxt:\"\",\n      temp:\"\",\n      desc:'',\n      icon:'',\n      err:false\n    };\n   \n    this.weathericon ={\n      Thunderstrom:\"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n }\n\n get_WeatherIcon(icons, rangeId) {\n  switch (true) {\n    case rangeId >= 200 && rangeId < 232:\n      this.setState({ icon:this.weathericon.Thunderstorm });\n      break;\n    case rangeId >= 300 && rangeId <= 321:\n      this.setState({ icon: this.weathericon.Drizzle });\n      break;\n    case rangeId >= 500 && rangeId <= 521:\n      this.setState({ icon:this.weathericon.Rain });\n      break;\n    case rangeId >= 600 && rangeId <= 622:\n      this.setState({ icon:this.weathericon.Snow });\n      break;\n    case rangeId >= 701 && rangeId <= 781:\n      this.setState({ icon: this.weathericon.Atmosphere });\n      break;\n    case rangeId === 800:\n      this.setState({ icon: this.weathericon.Clear });\n      break;\n    case rangeId >= 801 && rangeId <= 804:\n      this.setState({ icon: this.weathericon.Clouds });\n      break;\n    default:\n      this.setState({ icon: this.weathericon.Clouds });\n  }\n}\n\n  getweather = async(e)=>{\n    e.preventDefault();\n    const city =e.target.elements.city.value;\n    const country =e.target.elements.country.value;\n     \n     if(city && country){\n      const apicall = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${key}`\n      );\n    \n      const response = await apicall.json();\n      console.log(response);\n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n         mint:this.cal(response.main.temp_min),\n        maxt:this.cal(response.main.temp_max),\n        desc:response.weather[0].description,\n        temp:this.cal(response.main.temp),\n        err:false\n     })\n  \n     this.get_WeatherIcon(this.getweather,response.weather[0].id);\n     }\n\n     else{\n      this.setState({err:true})\n     }\n }\n\n  render(){\n    return(\n       <div>\n         <Form loadweather={this.getweather} err={this.state.err}/>\n        \n        \n         <Weather\n         city ={this.state.city}\n         country={this.state.country}\n         mint={this.state.mint}\n         maxt={this.state.maxt}\n         desc={this.state.desc}\n         temp={this.state.temp}\n         icon={this.state.icon}\n         />\n      \n   \n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}